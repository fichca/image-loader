basePath: /
definitions:
  dto.AuthUserDto:
    properties:
      login:
        type: string
      password:
        type: string
    type: object
  dto.UserDto:
    properties:
      description:
        type: string
      id:
        type: integer
      login:
        type: string
      name:
        type: string
      password:
        type: string
    type: object
  dto.UserResponse:
    properties:
      description:
        type: string
      id:
        type: integer
      imageUrls:
        items:
          type: string
        type: array
      login:
        type: string
      name:
        type: string
      password:
        type: string
    type: object
  response.Response:
    properties:
      data: {}
      error:
        type: boolean
    type: object
host: localhost:8080
info:
  contact: {}
  description: Image-loader API
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  title: Image-loader
  version: "1.0"
paths:
  /image/add:
    post:
      consumes:
      - application/json
      description: add image to minio
      parameters:
      - description: upload images
        in: formData
        name: fileKey
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/response.Response'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      summary: AddFile
      tags:
      - image
  /user/:
    get:
      consumes:
      - application/json
      description: get all users
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/dto.UserDto'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      summary: GetAllUser
      tags:
      - user
  /user/{userID}:
    delete:
      consumes:
      - application/json
      description: delete a user
      parameters:
      - description: delete user
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      summary: DeleteUser
      tags:
      - user
    get:
      consumes:
      - application/json
      description: get user
      parameters:
      - description: get user by ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/dto.UserResponse'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      summary: GetUserById
      tags:
      - user
  /user/add:
    post:
      consumes:
      - application/json
      description: add a new user
      parameters:
      - description: add a new user
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/dto.UserDto'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/response.Response'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      summary: AddUser
      tags:
      - user
  /user/auth:
    get:
      consumes:
      - application/json
      description: Issue JWT
      parameters:
      - description: authorize user
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/dto.AuthUserDto'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/response.Response'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      summary: Authorize
      tags:
      - auth
  /user/update:
    put:
      consumes:
      - application/json
      description: update user
      parameters:
      - description: update user
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/dto.UserDto'
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      summary: UpdateUser
      tags:
      - user
swagger: "2.0"
